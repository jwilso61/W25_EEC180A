
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module L5_part1(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,


	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
	
);

//=======================================================
//  REG/WIRE declarations
//=======================================================
(* ram_init_file = "Mif1.mif" *) reg [3:0] memory1 [15:0] /* synthesis ramstyle = "M9K" */;
(* ram_init_file = "Mif2.mif" *)reg [3:0] memory2 [15:0] /* synthesis ramstyle = "M9K" */;

wire writeEN = SW[9];
wire memSel = SW[8];
wire clk = KEY[0];
wire [3:0] addr = SW[7:4];
wire [3:0] dataIn = SW[3:0];
wire [3:0] dataOut;
reg [3:0]memory1Out;
reg [3:0]memory2Out;
 
//=======================================================
//  Structural coding
//=======================================================
always @ (posedge clk) begin
	if (memSel) 
		if (writeEN) 
		memory1[addr] <= dataIn; //write mem
		memory1Out <= memory1[addr]; // read mem
	end
always @ (posedge clk) begin
	if (!memSel)
		if (writeEN) 
		memory2[addr] <= dataIn; //write mem
		memory2Out <= memory2[addr]; // read mem
end

bit2Hex addrDisplay (HEX3, addr);
bit2Hex dataInDisplay (HEX2, dataIn);
bit2Hex ram1OutDisplay (HEX1, memory1Out[3:0]);
bit2Hex ram2OutDisplay (HEX0, memory2Out[3:0]);

endmodule
