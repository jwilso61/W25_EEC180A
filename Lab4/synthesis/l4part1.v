//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module l4part1(
	output	reg	Z,
	output	reg 	[2:0] state,
	input		CLK,
	input		X,
	input		RST
);
//=======================================================
//  REG/WIRE declarations
//=======================================================


reg [2:0] nextstate;

localparam S0 = 3'b000;
localparam S1 = 3'b001;
localparam S2 = 3'b010;
localparam S3 = 3'b011;
localparam S4 = 3'b100;
localparam S5 = 3'b101;
localparam S6 = 3'b110;
localparam S7 = 3'b111;

//=======================================================
//  Structural coding
//=======================================================

always @ (posedge CLK or posedge RST) begin
	if (RST) state <= S0;
	else state <= nextstate;
end

always @ (state, X) begin
	case (state)
		S0: begin
			if (X) begin
				nextstate = S2;
				Z = 1'b0;
			end
			else begin
				nextstate = S1;
				Z = 1'b0;
			end
		end
		S1: begin
			if (X) begin
				nextstate = S2;
				Z = 1'b0;
			end
			else begin
				nextstate = S3;
				Z = 1'b0;
			end
		end
		S2: begin
			if (X) begin
				nextstate = S5;
				Z = 1'b0;
			end
			else begin
				nextstate = S4;
				Z = 1'b0;
			end
		end
		S3: begin
			if (X) begin
				nextstate = S2;
				Z = 1'b0;
			end
			else begin
				nextstate = S6;
				Z = 1'b0;
			end
		end
		S4: begin
			if (X) begin
				nextstate = S2;
				Z = 1'b1;
			end
			else begin
				nextstate = S3;
				Z = 1'b0;
			end
		end
		S5: begin
			if (X) begin
				nextstate = S7;
				Z = 1'b1;
			end
			else begin
				nextstate = S4;
				Z = 1'b0;
			end
		end
		S6: begin
			if (X) begin
				nextstate = S6;
				Z = 1'b0;
			end
			else begin
				nextstate = S6;
				Z = 1'b0;
			end
		end
		S7: begin
			if (X) begin
				nextstate = S7;
				Z = 1'b1;
			end
			else begin
				nextstate = S7;
				Z = 1'b1;
			end
		end
	endcase
end
endmodule
